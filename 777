第七周作业

1.数组

变量：存储单个元素的内存空间

数组：存储多个元素的连续的内存空间，相当于多个变量的集合

数组名和索引
索引：编号从0开始，属于数值索引

注意：索引可支持使用自定义的格式而不仅是数值格式，即为关联索引，bash4.0版本之后开始支持

bash的数组支持稀疏格式（索引不连续）

声明数组：
declare -a ARRAY-NAME

declare -A ARRAY-NAME:关联数组

注意：两者不可相互转换

引用数组

引用数组元素
${ARRAY-NAME[INDEX]}

注意：省略[INDEX]表示引用下标位0的元素

引用数组所有元素
${ARRAY-NAME[*]}

${ARRAY-NAME[@]

数组的长度（数组中的元素的个数）
${#ARRAY-NAME[*]}

${#ARRAY-NAME[@]}

删除数组中的某元素：导致稀疏格式

unset ARRAY[INDEX]

删除整个数组

unset ARRAY

数组数据处理

引用数组中的元素：

数组切片：${ARRAY[@]：offset：number}

offset：要跳过的元素个数

numer：要取出的元素个数

取偏移量之后的所有元素

${ARRAY[@]：offset}

向数组中追加元素：

ARRAY[${#ARRAY[*]}]=value

2.字符串切片

${#var}：返回字符串变量var的长度

{var：offset}：返回字符串变量var中从第offset个字符后（不包括第offset个字符）的字符开始，到最后的部分，offset的取值在0到${#var}-1之间（bash4.2后，允许为负值）

{var：offset：number}：返回字符串变量var中第offset个字符后（不包括第offset个字符）的字符开始，长度为number的部分

${var:-length}：取字符串的最右侧几个字符

注意：冒号后必须有一空白字符

${var：offset-length}：从最左侧跳过offset字符，一直向右取到距离最右侧lengh个字符之间的内容

${var：length：-offset}：先从最右侧向左取到length个字符开始，再向由取到距离最右侧offset个字符之间的内容

注意：-length前空格

基于模式取子串
${var#*word}：其中word可以是指定的任意字符

功能：自左而右，查找var变量所储存的字符串中，第一次出现的word，删除字符串开头至第一次出现word字符串（含）之间的所有字符

${var##*word}：同上，贪婪模式，不同的是，删除的是字符串开头至最后一次有word指定的字符至间的所有内容

Shell变量一般是无类型的，但是bash Shell提供了declare和typeset两个命令用于指定变量的类型，两个命令是等价的

expect最常用的语法（tcl语言：模式-动作）

service命令：手动管理服务

service服务srart|stop|restart

service--status-all

瞬态|（Transient）服务被xinetd进程所管理进入的请求首先被xinetd代理

3.SELinux策略

对象（object）：所有恶意读取的对象，包括文件、目录和进程，端口等

主体：进程称为主体（subject）

安全策略：定义主体读取对象的规则数据库，规则中记录了哪个类型的主体使用哪个方法读取哪一个对象是允许还是拒绝的，并且定义了哪种行为是允许或拒绝

SElinux工作类型

SElinux有四种工作类型：
Strict：CentOS 5，每个进程都受到了selinux的控制

targeted：用来保护常见的网络服务，仅有限进程受到selinux控制，只监控容易被入侵的进程，CentOS 4只保护13个服务，CentOS 5保护88个服务

minimun：CentOS 7，修改的 targeted，只对选择的网络服务

mls：提供MLS（多级安全）机制的安全性

targeted为默认类型，minimun额mls稳定性不足，未加以应用，strit已不再使用

4.awk语言

基本格式：awk[options]program file...

Program：gattern{action statements;...}

pattern和action
pattern部分决定动作语句何时触发及触发事件

BEGIN,END

action statements对数据进行处理，放在{}内指明
print，printf
